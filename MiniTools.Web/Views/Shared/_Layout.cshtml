@* Uncomment to use IOptionsMonitor (particularly if we want reflect real-time changes vs DI set values only at startup)
@using Microsoft.Extensions.Options;
@inject IOptionsMonitor<ApplicationSettings> optionsMonitor;  *@
@* Uncomment to use Configuration directly;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration *@
@using MiniTools.Web.Options;
@inject ApplicationSettings applicationSettings;
@{
    // Demo techniques: Getting ApplicationSettings from 'appsettings.json'
    // Another way to get ApplicationSettings (using IOptionsMonitor to read configured options):
    // ApplicationSettings applicationSettings = optionsMonitor.Get("application");
}
<!DOCTYPE html>
<html lang="en">  
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @applicationSettings.Name</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/bootswatch/pulse/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    @* <link rel="stylesheet" href="~/MiniTools.Web.styles.css" asp-append-version="true" /> *@
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">@applicationSettings.Name</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        @if (User.Identity.IsAuthenticated)
                        {
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Logout" asp-action="Index">Log out</a>
                        </li>
                        }
                        else
                        {
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Login" asp-action="Index">Log in</a>
                        </li>
                        }
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="Index">User</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2021 - @applicationSettings.Name v@(applicationSettings.Version) - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a> (@User.Identity.IsAuthenticated)
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
